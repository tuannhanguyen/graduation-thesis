package com.eshop.customer;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.authentication.RememberMeAuthenticationToken;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.eshop.common.entity.Country;
import com.eshop.common.entity.Customer;
import com.eshop.security.CustomerUserDetails;
import com.eshop.setting.CountryRepository;

@Controller
public class CustomerController {

	@Autowired
	private CustomerService customerService;

	@Autowired
	private CountryRepository countryRepository;

	@GetMapping("/register")
	public String showRegisterForm(Model model) {
		List<Country> listAllCountries = customerService.listAllCountries();

		model.addAttribute("listAllCountries", listAllCountries);
		model.addAttribute("pageTitle", "Customer Registration");
		model.addAttribute("customer", new Customer());

		return "register/register_form";
	}

	@PostMapping("/create_customer")
	public String createCustomer(Customer customer, Model model) {
		customerService.registerCustomer(customer);

		model.addAttribute("pageTitle", "Registration Succeeded!");
		return "/register/register_success";
	}

	@GetMapping("/account_details")
	public String viewAccountDetails(Model model, HttpServletRequest request) {
		String email = getEmailOfAuthenticatiedCustomer(request);
		Customer customer = customerService.getCustomerByEmail(email);

		List<Country> listAllCountries = countryRepository.findAllByOrderByNameAsc();

		model.addAttribute("customer", customer);
		model.addAttribute("listAllCountries", listAllCountries);

		return "customer/account_form";
	}
	
	@PostMapping("/update_account_details")
	public String updateAccountDetails(Model model, Customer customer, RedirectAttributes ra,
			HttpServletRequest request) {
		customerService.updateCustomer(customer);
		ra.addFlashAttribute("message", "Your account details have been updated");
		
		updateNameForAuthenticatedCustomer(customer, request);
		
		return "redirect:/account_details";
		
	}

	private String getEmailOfAuthenticatiedCustomer(HttpServletRequest request) {

		Object principal = request.getUserPrincipal();
		String customerEmail = null;
		if (principal instanceof UsernamePasswordAuthenticationToken
				|| principal instanceof RememberMeAuthenticationToken) {
			customerEmail = request.getUserPrincipal().getName();
		}

		return customerEmail;
	}

	private void updateNameForAuthenticatedCustomer(Customer customer, HttpServletRequest request) {
		Object principal = request.getUserPrincipal();
		String fullName = customer.getFirstName() + " " + customer.getLastName();
		if (principal instanceof UsernamePasswordAuthenticationToken
				|| principal instanceof RememberMeAuthenticationToken) {
			fullName = request.getUserPrincipal().getName();
			CustomerUserDetails userDetails = (CustomerUserDetails) principal;
			Customer authenticatedCustomer = userDetails.getCustomer();
			authenticatedCustomer.setFirstName(customer.getFirstName());
			authenticatedCustomer.setLastName(customer.getLastName());
		}
	}
}
