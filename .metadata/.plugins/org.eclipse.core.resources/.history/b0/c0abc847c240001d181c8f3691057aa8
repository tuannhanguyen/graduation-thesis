package com.eshop.customer;

import java.util.List;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AnonymousAuthenticationToken;
import org.springframework.security.authentication.RememberMeAuthenticationToken;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;

import com.eshop.common.entity.Country;
import com.eshop.common.entity.Customer;

@Controller
public class CustomerController {

	@Autowired private CustomerService customerService;

	@GetMapping("/register")
	public String showRegisterForm(Model model) {
		List<Country> listAllCountries = customerService.listAllCountries();

		model.addAttribute("listAllCountries", listAllCountries);
		model.addAttribute("pageTitle", "Customer Registration");
		model.addAttribute("customer", new Customer());
		
		return "register/register_form";
	}

	@PostMapping("/create_customer")
	public String createCustomer(Customer customer, Model model) {
		customerService.registerCustomer(customer);

		model.addAttribute("pageTitle", "Registration Succeeded!");
		return "/register/register_success";
	}
	
	@GetMapping("/account_details")
	public String viewAccountDetails(Model mode, HttpServletRequest request) { 
		
		
		return "customer/account_form";
	}
	
private void updateNameForAuthenticatedCustomer(HttpServletRequest request) {
		
		Object principal = request.getUserPrincipal();
		String customerEmail = null;
		if (principal instanceof UsernamePasswordAuthenticationToken ||
				principal instanceof RememberMeAuthenticationToken) {
			CustomerDetails customerDetails = getCustomerDetailsObject(principal);
			Customer authenticatedCustomer = customerDetails.getCustomer();
			authenticatedCustomer.setFirstName(customer.getFirstName());
			authenticatedCustomer.setLastName(customer.getLastName());
			
		} else if (principal instanceof OAuth2AuthenticationToken) {
			OAuth2AuthenticationToken oAuth2Token = (OAuth2AuthenticationToken) principal;
			CustomerOAuth2User oAuth2User = (CustomerOAuth2User) oAuth2Token.getPrincipal();
			fullName = customer.getFirstName() + " " + customer.getLastName();
			oAuth2User.setFullName(fullName);
		}
	}
	
	private CustomerDetails getCustomerDetailsObject(Object principal) {
		CustomerDetails customerDetails = null;
		if (principal instanceof UsernamePasswordAuthenticationToken) {
			UsernamePasswordAuthenticationToken token = (UsernamePasswordAuthenticationToken) principal;
			customerDetails = (CustomerDetails) token.getPrincipal();
		} else if(principal instanceof RememberMeAuthenticationToken) {
			RememberMeAuthenticationToken token = (RememberMeAuthenticationToken) principal;
			customerDetails = (CustomerDetails) token.getPrincipal();
		}
		return customerDetails;
	}
}
